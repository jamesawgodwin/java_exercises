/*

Given and array of integers, 1 - n; some elements appear twice and some appear once

find all the elements that appear twice
linear solution, constant space -> ignore space of return type, that is always there because it is the return type. No EXTRA space is needed
*/

class Solution {


public List<Integer> findDuplicates(int[] nums) {

//HashSet<Integer> hash = new HashSet<>();
List<Integer> arr = new ArrayList<>();
for (int i = 0; i < nums.length; i++) {
  int index = Math.abs(nums[i] - 1); i-1 spans all index posiitons in array of size 1-n
  if(nums[index] < 0) arr.add(index+1); // the value
  nums[index] = -nums[index];
}
 
return arr;

}

//TRACE

[4,3,2,7,8,2,3,1] // arr
nums[i] = 4;
index = 4-1 = 3;
nums[3] = 7;
(7 < 0) false;
7 = -7;

[4,3,2,-7,8,2,3,1] // arr
nums[i] = 3;
index = 3-1 = 2;
nums[2] = 2;
(2 < 0) false;
2 = -2;


[4,3,-2,-7,8,2,3,1] // arr
nums[i] = abs(-2) = 2;
index = 2-1 = 1;
nums[1] = 3;
(3 < 0) false;
3 = -3;

[4,-3,-2,-7,8,2,3,1] // arr
nums[i] = abs(-7) = 7;
index = 7-1 = 6;
nums[6] = 3;
(3 < 0) false;
3 = -3;

[4,-3,-2,-7,8,-2,-3,1] // arr = []
nums[i] = abs(8) = 8;
index = 8-1 = 7;
nums[7] = 1;
(1 < 0) false;
1 = -1;

[4,-3,-2,-7,8,-2,-3,-1] // arr = [3]
nums[i] = abs(-2) = 2;
index = 2-1 = 1;
nums[1] = -3;
(-3 < 0) true;
-3= 3;

[4,3,-2,-7,8,-2,-3,-1] // arr = [3,2]]
nums[i] = abs(-3) = 3;
index = 3-1 = 2;
nums[2] = -2;
(-2 < 0) true;
-2= 2;

[4,3,-2,-7,8,-2,-3,-1] // arr = [3,2]]
nums[i] = abs(-1) = 1;
index = 1-1 = 0;
nums[0] = 4;
(4 < 0) false;
4 = -4;
